trigger:
- master
- develop

pr:
- master
- develop
- feature/*

pool:
  vmImage: macos-12

variables:
  Configuration: Release
  SDK:
  EOCompliance-Mac: true

  # Xcode 13.2.1 version is the last one that has compatible bitcode with Xcode 13.0 (minimal supported).
  XCODE_PATH: '/Applications/Xcode_13.2.1.app/Contents/Developer'

jobs:
- job:
  displayName: Build SDK for All Platforms
  steps:
  - checkout: self
    submodules: recursive

  - bash: |
      version="$(Scripts/framework-version.sh)+$(git rev-parse --short $BUILD_SOURCEVERSION)"
      echo "Change version to $version"
      Scripts/framework-version.sh "$version"
    displayName: 'Update Version'
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

  - bash: 'sudo gem install jazzy --no-document'
    displayName: 'Install Jazzy'

  - task: Xcode@5
    displayName: Build App Center Frameworks
    inputs:
      xcWorkspacePath: AppCenter.xcworkspace
      scheme: 'All App Center Frameworks'
      xcodeVersion: specifyPath
      xcodeDeveloperDir: '$(XCODE_PATH)'
      args: 'SYMROOT="$(Build.BinariesDirectory)" GCC_TREAT_WARNINGS_AS_ERRORS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=YES'
    timeoutInMinutes: 50

  - task: Xcode@5
    displayName: Generate App Center Documentation
    inputs:
      xcWorkspacePath: AppCenter.xcworkspace
      scheme: 'All App Center Documentation'

  - task: Bash@3
    displayName: Archive
    inputs:
      targetType: filePath
      filePath: './Scripts/create-archive.sh'

  - task: CopyFiles@2
    displayName: 'Copy Archives to Staging Directory'
    inputs:
      SourceFolder: './AppCenter-SDK-Apple'
      Contents: '**/AppCenter-SDK-Apple*.zip'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      ArtifactName: Release

- job:
  displayName: Version Information
  steps:
  - bash: |
      swift --version
      swift package describe
    displayName: 'Print Swift Package Information'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      failOnAlert: true

  - bash: |
      VERSION=$(Scripts/framework-version.sh)
      mkdir -p $(Build.ArtifactStagingDirectory)/Info
      echo $VERSION > $(Build.ArtifactStagingDirectory)/Info/VERSION
      echo $BUILD_SOURCEVERSION > $(Build.ArtifactStagingDirectory)/Info/COMMIT
      Scripts/get-release-notes.sh $VERSION > $(Build.ArtifactStagingDirectory)/Info/RELEASE.md
    displayName: 'Collect Version Information'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Version Information'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Info'
      ArtifactName: Info
